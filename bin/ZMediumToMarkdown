#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$lib = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift($lib)

require "ZMediumFetcher"
require "Helper"
require "optparse"

class Main
    def initialize
        fetcher = ZMediumFetcher.new
        ARGV << '-h' if ARGV.empty?

        filePath = ENV['PWD'] || ::Dir.pwd

        OptionParser.new do |opts|
            opts.banner = "Usage: ZMediumFetcher [options]"
        
            opts.on('-uUSERNAME', '--username=USERNAME', 'Downloading all posts from user') do |username|
                outputFilePath = PathPolicy.new("#{filePath}/Output", "Output")
                fetcher.downloadPostsByUsername(username, outputFilePath)

                Helper.printNewVersionMessageIfExists()
            end
        
            opts.on('-pPOST_URL', '--postURL=POST_URL', 'Downloading single post') do |postURL|
                outputFilePath = PathPolicy.new("#{filePath}/Output", "Output")
                fetcher.downloadPost(postURL, outputFilePath, nil)

                Helper.printNewVersionMessageIfExists()
            end

            opts.on('-jUSERNAME', '--jekyllUsername=USERNAME', 'Downloading all posts from user with Jekyll friendly') do |username|
                outputFilePath = PathPolicy.new(filePath, "")
                fetcher.isForJekyll = true
                fetcher.downloadPostsByUsername(username, outputFilePath)

                Helper.printNewVersionMessageIfExists()
            end
        
            opts.on('-kPOST_URL', '--jekyllPostURL=POST_URL', 'Downloading single post with Jekyll friendly') do |postURL|
                outputFilePath = PathPolicy.new(filePath, "")
                fetcher.isForJekyll = true
                fetcher.downloadPost(postURL, outputFilePath, nil)

                Helper.printNewVersionMessageIfExists()
            end

            opts.on('-n', '--new', 'Update to latest version') do
                if Helper.getRemoteVersionFromGithub() > Helper.getLocalVersion()
                    Helper.downloadLatestVersion()
                else
                    puts "You're using the latest version :)"
                end
            end

            opts.on('-c', '--clean', 'Remove all downloaded posts data') do
                outputFilePath = PathPolicy.new(filePath, "")
                FileUtils.rm_rf(Dir[outputFilePath.getAbsolutePath(nil)])
                puts "All downloaded posts data has been removed."

                Helper.printNewVersionMessageIfExists()
            end

            opts.on('-v', '--version', 'Print current ZMediumToMarkdown Version & Output Path') do
                puts "Version:#{Helper.getLocalVersion().to_s}"
                
                Helper.printNewVersionMessageIfExists()
            end
            
        end.parse!
    end
end

begin 
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown"
    puts "You have read and agree with the Disclaimer."
    Main.new()
    puts "Execute Successfully!!!"
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown"
    puts "#Thanks for using this tool."
    puts "#If this is helpful, please help to star the repo or recommend it to your friends."
rescue => e
    puts "#Error: #{e.class} #{e.message}\n"
    puts e.backtrace
    puts "#Please feel free to open an Issue or submit a fix/contribution via Pull Request on:\n"
    puts "#https://github.com/ZhgChgLi/ZMediumToMarkdown\n"
end